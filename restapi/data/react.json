[
    {
        "id" : 1,
        "reac_intro": "Modular user interface elements are created using the JavaScript framework ReactJS. Features of React: JSX JSX is a JavaScript syntactic extension. Using JSX is not essential when creating for React, however it is advised. The only foundation for React is components. Everything must be viewed as a component. This will make it simpler for you to the code when working on big projects. Unidirectional data flow and flux React provides unidirectional data flow, which simplifies project-related reasoning. Your data's unidirectionality is maintained via a pattern known as flux. According to the Facebook Inc. licencing, React is granted a licence. The documentation is released under a CC BY 4.0 licence.",
        "reac_hook": "The ability to connect into react state and life cycle elements from functional component is a function known as a hook. Hooks are ineffective inside of classes. You may utilise React without the class components thanks to them. Instead, the react 16.8 version introduces hooks. Your understanding of react ideas is not replaced by hooks. Hooks, on the other hand, offer a more direct api to the react notions you are already familiar with, such as props, state, context, refs, and life cycle. Absolute backwards compatibility. There are no breaking changes in hooks. React's classes won't be gone, at least not anytime soon. In a classess, it is ineffective",
        "reac_rules": "Although hooks are javascript functions, they introduce two further restrictions. 1. Only use top-level call hooks. In loops, conditions, or nested functions, do not call hooks, 2. Only respond function components' call hooks. Hooks shouldn't be called from standard JavaScript methods, 3. Your own unique hooks are a third acceptable area to use hooks.UseState, useEffect, useContext, and custom hooks are examples of basic hooks.",
        "reac_use": "Before hooks, let's grasp object and array destructuring. 1.usestate returns a pair that includes the current state value and an update function, 2. It resembles Similar to this.setState in a class, however it does not combine existing and new state, 3. Both single and multiple usestate hooks are available, 4.Hooks execute sequentially one after the other.",
        "reac_eff": "Function components can execute side effects thanks to UseEffect. 1. It serves the same function as react classes componentDidmount, componentDidUpdate, and componentWillUnmount, but with a single API, 2. React by default executes the effects following each render, excluding the first render, 3. You may have several effects in a component, similar to how you do with usestate.",
        "reac_cus": "1. Rather than being a feature, custom hooks are more of a convention We refer to a function as being a custom hook if its name begins with use and it invokes other hooks, 2. Each component's state is totally independent from the others. Hooks allow you to reuse stateful functionality rather than stateless data. In a single component, you may even use the same custom hook again.",
        "reac_con": "1. It is simpler to communicate data across your project without explicitly sending props down the tree when you use the UseContext hook. 2. When your app is tiny or your data is straightforward, context might be a wonderful, easy substitute for redux. 3. The context offers two items. a. The customer; b. The supplier.",
        "reac_image":"https://i.ibb.co/RBM7g1J/funcreact.png",
        "reac_image2":"https://i.ibb.co/NTnsSfJ/classreac.png"
    }
]